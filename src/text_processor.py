# Generated by Copilot
from typing import Callable, Dict
import re

class TextProcessor:
    """Text processing operations handler."""
    
    @staticmethod
    def to_uppercase(text: str) -> str:
        """Convert text to uppercase."""
        return text.upper()
    
    @staticmethod
    def to_lowercase(text: str) -> str:
        """Convert text to lowercase."""
        return text.lower()
    
    @staticmethod
    def to_titlecase(text: str) -> str:
        """Convert text to title case."""
        return text.title()
    
    @staticmethod
    def remove_extra_spaces(text: str) -> str:
        """Remove extra whitespace from text."""
        return ' '.join(text.split())
    
    @staticmethod
    def reverse_text(text: str) -> str:
        """Reverse the text."""
        return text[::-1]
    
    @staticmethod
    def count_words(text: str) -> str:
        """Count words in the text."""
        words = len(text.split())
        return f"Word count: {words}"
    
    @staticmethod
    def remove_punctuation(text: str) -> str:
        """Remove all punctuation from text."""
        return re.sub(r'[^\w\s]', '', text)
    
    @staticmethod
    def to_snake_case(text: str) -> str:
        """Convert text to snake_case."""
        text = re.sub(r'[^\w\s]', '', text)
        return '_'.join(text.lower().split())

    @classmethod
    def get_available_operations(cls) -> Dict[str, Callable]:
        """Get all available text operations."""
        return {
            'uppercase': cls.to_uppercase,
            'lowercase': cls.to_lowercase,
            'titlecase': cls.to_titlecase,
            'remove_spaces': cls.remove_extra_spaces,
            'reverse': cls.reverse_text,
            'word_count': cls.count_words,
            'remove_punctuation': cls.remove_punctuation,
            'snake_case': cls.to_snake_case
        }